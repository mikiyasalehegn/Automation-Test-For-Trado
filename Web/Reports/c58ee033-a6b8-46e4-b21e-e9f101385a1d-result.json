{"name": "test_dasheboard_text_font_size", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\nBacktrace:\n\t(No symbol) [0x003837D3]\n\t(No symbol) [0x00318B81]\n\t(No symbol) [0x0021B230]\n\t(No symbol) [0x002409DF]\n\t(No symbol) [0x0024253D]\n\tGetHandleVerifier [0x005FABF2+2510930]\n\tGetHandleVerifier [0x00628EC1+2700065]\n\tGetHandleVerifier [0x0062C86C+2714828]\n\tGetHandleVerifier [0x00433480+645344]\n\t(No symbol) [0x00320FD2]\n\t(No symbol) [0x00326C68]\n\t(No symbol) [0x00326D4B]\n\t(No symbol) [0x00330D6B]\n\tBaseThreadInitThunk [0x75EF7D69+25]\n\tRtlInitializeExceptionChain [0x76F3BB9B+107]\n\tRtlClearBits [0x76F3BB1F+191]", "trace": "self = <Web.Tests.test_dashboard.TestDashboard object at 0x000002BCBF10C250>\n\n    @allure.description(\"Verifying font size of the label to dasheboard text font is displayed\")\n    def test_dasheboard_text_font_size(self):\n        self.handling_the_first_popup()\n>       self.click_on_dsheboard_button()\n\nTests\\test_dashboard.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\dashboard_page.py:32: in click_on_dsheboard_button\n    self._click(self.dsheboard_button)\nBasePage\\basepage.py:32: in _click\n    self._wait_until_element_is_visible(locate)\nBasePage\\basepage.py:25: in _wait_until_element_is_visible\n    wait.until(ec.visibility_of_element_located(locate))\n..\\..\\..\\pselenium-venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\n..\\..\\..\\pselenium-venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:125: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\..\\..\\pselenium-venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:861: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\pselenium-venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002BCBF79A0E0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"Backtrac...dInitThunk [0x75EF7D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76F3BB9B+107]\\\\n\\\\tRtlClearBits [0x76F3BB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x003837D3]\nE       \t(No symbol) [0x00318B81]\nE       \t(No symbol) [0x0021B230]\nE       \t(No symbol) [0x002409DF]\nE       \t(No symbol) [0x0024253D]\nE       \tGetHandleVerifier [0x005FABF2+2510930]\nE       \tGetHandleVerifier [0x00628EC1+2700065]\nE       \tGetHandleVerifier [0x0062C86C+2714828]\nE       \tGetHandleVerifier [0x00433480+645344]\nE       \t(No symbol) [0x00320FD2]\nE       \t(No symbol) [0x00326C68]\nE       \t(No symbol) [0x00326D4B]\nE       \t(No symbol) [0x00330D6B]\nE       \tBaseThreadInitThunk [0x75EF7D69+25]\nE       \tRtlInitializeExceptionChain [0x76F3BB9B+107]\nE       \tRtlClearBits [0x76F3BB1F+191]\n\n..\\..\\..\\pselenium-venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: InvalidSessionIdException"}, "description": "Verifying font size of the label to dasheboard text font is displayed", "steps": [{"name": "Opening the qa-trado website", "status": "passed", "start": 1677082694525, "stop": 1677082703458}, {"name": "fill_values_to_phone_correct", "status": "passed", "parameters": [{"name": "correct_phone_number", "value": "'1953333333'"}], "start": 1677082703458, "stop": 1677082704237}, {"name": "fill_values_to_passward_field", "status": "passed", "parameters": [{"name": "valid_passward", "value": "'1234'"}], "start": 1677082709430, "stop": 1677082709601}, {"name": "click_on_dsheboard_button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\nBacktrace:\n\t(No symbol) [0x003837D3]\n\t(No symbol) [0x00318B81]\n\t(No symbol) [0x0021B230]\n\t(No symbol) [0x002409DF]\n\t(No symbol) [0x0024253D]\n\tGetHandleVerifier [0x005FABF2+2510930]\n\tGetHandleVerifier [0x00628EC1+2700065]\n\tGetHandleVerifier [0x0062C86C+2714828]\n\tGetHandleVerifier [0x00433480+645344]\n\t(No symbol) [0x00320FD2]\n\t(No symbol) [0x00326C68]\n\t(No symbol) [0x00326D4B]\n\t(No symbol) [0x00330D6B]\n\tBaseThreadInitThunk [0x75EF7D69+25]\n\tRtlInitializeExceptionChain [0x76F3BB9B+107]\n\tRtlClearBits [0x76F3BB1F+191]\n\n", "trace": "  File \"C:\\Users\\user\\pselenium-venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\PycharmProjects\\Trado\\Web\\Pages\\dashboard_page.py\", line 32, in click_on_dsheboard_button\n    self._click(self.dsheboard_button)\n  File \"C:\\Users\\user\\PycharmProjects\\Trado\\Web\\BasePage\\basepage.py\", line 32, in _click\n    self._wait_until_element_is_visible(locate)\n  File \"C:\\Users\\user\\PycharmProjects\\Trado\\Web\\BasePage\\basepage.py\", line 25, in _wait_until_element_is_visible\n    wait.until(ec.visibility_of_element_located(locate))\n  File \"C:\\Users\\user\\pselenium-venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 86, in until\n    value = method(self._driver)\n  File \"C:\\Users\\user\\pselenium-venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 125, in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n  File \"C:\\Users\\user\\pselenium-venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 861, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"C:\\Users\\user\\pselenium-venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\user\\pselenium-venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1677082710007, "stop": 1677082710064}], "start": 1677082694525, "stop": 1677082710066, "uuid": "099f4ddb-3028-4916-8cf6-50f597adf5fd", "historyId": "c80a763b0e4e57a9b0d5d23650de4519", "testCaseId": "6135d1a5c73e853570e3b081edaffe46", "fullName": "Tests.test_dashboard.TestDashboard#test_dasheboard_text_font_size", "labels": [{"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_dashboard"}, {"name": "subSuite", "value": "TestDashboard"}, {"name": "host", "value": "mike"}, {"name": "thread", "value": "18868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_dashboard"}]}
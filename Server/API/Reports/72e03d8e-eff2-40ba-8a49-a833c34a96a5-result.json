{"name": "test_login_correctly", "status": "broken", "statusDetails": {"message": "TypeError: Object of type set is not JSON serializable", "trace": "self = <Server.API.Tests.test_common_business_API.Test_Registration object at 0x000001E21A5C2EF0>\n\n    @allure.description('invalid user account phonenumbers')\n    def test_login_correctly(self):\n        url = LoginConstants.url_login\n        data = LoginConstants.data_invalid_phone_numbers\n>       res = requests.post(url, json=data)\n\nTests\\test_common_business_API.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\pselenium-venv\\lib\\site-packages\\requests\\api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n..\\..\\..\\..\\pselenium-venv\\lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n..\\..\\..\\..\\pselenium-venv\\lib\\site-packages\\requests\\sessions.py:573: in request\n    prep = self.prepare_request(req)\n..\\..\\..\\..\\pselenium-venv\\lib\\site-packages\\requests\\sessions.py:484: in prepare_request\n    p.prepare(\n..\\..\\..\\..\\pselenium-venv\\lib\\site-packages\\requests\\models.py:371: in prepare\n    self.prepare_body(data, files, json)\n..\\..\\..\\..\\pselenium-venv\\lib\\site-packages\\requests\\models.py:511: in prepare_body\n    body = complexjson.dumps(json, allow_nan=False)\nC:\\Program Files\\Python310\\lib\\json\\__init__.py:238: in dumps\n    **kw).encode(obj)\nC:\\Program Files\\Python310\\lib\\json\\encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\nC:\\Program Files\\Python310\\lib\\json\\encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000001E21A615300>, o = {'2436577643'}\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type set is not JSON serializable\n\nC:\\Program Files\\Python310\\lib\\json\\encoder.py:179: TypeError"}, "description": "invalid user account phonenumbers", "start": 1677140714630, "stop": 1677140714633, "uuid": "a0f9ed9e-cc11-45dc-bef2-c6a737fecbbf", "historyId": "32834963e43a847ebf575793794478dc", "testCaseId": "37030a79da733cf4a5653d77b0e68409", "fullName": "Tests.test_common_business_API.Test_Registration#test_login_correctly", "labels": [{"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_common_business_API"}, {"name": "subSuite", "value": "Test_Registration"}, {"name": "host", "value": "mike"}, {"name": "thread", "value": "59956-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_common_business_API"}]}